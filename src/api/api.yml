################## DEBUG  #########################
debug_rds:
  handler: src/api/debug/rds.debug_rds
  events:
    - http:
        method: post
        path: /database
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}
debug_sync:
  handler: src/api/debug/rds.debug_sync
  events:
    - http:
        method: post
        path: /database/sync
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}
debug_vpc:
  handler: src/api/debug/rds.rds_vpc
  events:
    - http:
        method: post
        path: /database/vpc
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}
debug_creator_create:
  handler: src/api/debug/creator.debug_newcreator
  events:
    - http:
        method: post
        path: /creator/create
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

################## STRIPE COINS  #########################

stripe_create_checkout:
  handler: src/api/coins/stripe.stripe_create_checkout
  events:
    - http:
        method: post
        path: /coins/purchase/stripe-checkout
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

stripe_create_intent:
  handler: src/api/coins/stripe.stripe_create_intent
  events:
    - http:
        method: post
        path: /coins/purchase/stripe-intent
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}


stripe_confirm_intent:
  handler: src/api/coins/stripe.stripe_confirm_intent
  events:
    - http:
        method: post
        path: /coins/purchase/stripe-intent-confirm
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

stripe_events:
  handler: src/api/coins/stripe.event_listener
  events:
    - http:
        method: post
        path: /stripe
  environment:
    ${file(src/dynamic-environment.js):database}


#################### COINS ##################

coins_purchase_options:
  handler: src/api/coins/coins.coins_options_get
  events:
    - http:
        method: get
        path: /coins/options
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}


################## USERS  #########################
user_get:
  handler: src/api/users/user.user_get
  events:
    - http: # GET session or create new user if it doesn't exist
        method: get
        path: /users
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

user_my_purchases:
  handler: src/api/users/user.user_my_purchases
  events:
    - http:
        method: get
        path: /users/my-purchases
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}


user_put:
  handler: src/api/users/user.user_put
  events:
    - http: # PUT updates the currently logged in user
        method: put
        path: /users
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

user_email_exist:
  handler: src/api/users/user.email_exists
  events:
    - http: # GET if returns boolean true, then email is already in use
        method: get
        path: /users/emailexists/{email}
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}


user_name_exist:
  handler: src/api/users/user.name_exists
  events:
    - http: # GET if returns boolean true, then email is already in use
        method: get
        path: /users/usernameexists/{username}
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

register_validate:
  handler: src/api/users/user.register_validate
  events:
    - http: # GET if returns boolean true, then email is already in use
        method: get
        path: /users/registervalidate/{email}/{username}
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}    


################## MANAGE CREATORS #########################

creators_manage_get_mine:
  handler: src/api/creators/creator.creators_manage_get_mine
  events:
    - http:
        method: get
        path: /manage/creators
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

creator_manage_get:
  handler: src/api/creators/creator.creator_manage_get
  events:
    - http:
        method: get
        path: /manage/creator/{creatorID}
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

creator_manage_assets:
  handler: src/api/creators/creator.creator_manage_assets
  events:
    - http:
        method: get
        path: /manage/creator/{creatorID}/assets
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}


creator_manage_post:
  handler: src/api/creators/creator.creator_manage_post
  events:
    - http:
        method: post
        path: /manage/creators
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

creator_manage_put:
  handler: src/api/creators/creator.creator_manage_put
  events:
    - http:
        method: put
        path: /manage/creator/{creatorID}
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}


################## CREATORS PUBLIC #########################
creators_get:
  handler: src/api/creators/creator.creators_get
  events:
    - http:
        method: get
        path: /creators
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

creator_get:
  handler: src/api/creators/creator.creator_get
  events:
    - http:
        method: get
        path: /creator/{creatorID}
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}


################## ASSETS PUBLIC #########################
query_assets:
  handler: src/api/assets/asset.query_assets
  events:
    - http:
        method: get
        path: /assets
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

assets_unlocked:
  handler: src/api/assets/asset.assets_unlocked
  events:
    - http:
        method: get
        path: /assets/unlocked
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

asset_unlock:
  handler: src/api/assets/asset.asset_unlock
  events:
    - http:
        method: post
        path: /assets/{assetID}/unlock
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

asset_download_link:
  handler: src/api/assets/asset.asset_download_link
  events:
    - http:
        method: get
        path: /assets/{assetID}/download
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

get_asset:
  handler: src/api/assets/asset.asset_get
  events:
    - http:
        method: get
        path: /assets/{assetID}
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

get_creator_asset:
  handler: src/api/assets/asset.creator_asset_get
  events:
    - http:
        method: get
        path: /creators/{creatorSlug}/asset/{assetSlug}
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}


################## ASSETS MANAGE ###################

asset_manage_get:
  handler: src/api/assets/asset.asset_manage_get
  events:
    - http:
        method: get
        path: /manage/assets/{assetID}
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

asset_manage_delete:
  handler: src/api/assets/asset.asset_manage_delete
  events:
    - http:
        method: post
        path: /manage/assets/{assetID}/delete
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

assets_manage_update:
  handler: src/api/assets/asset.assets_manage_update
  events:
    - http:
        method: put
        path: /manage/assets/update
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

get_upload_signature:
  handler: src/api/assets/transloadit.get_upload_signature
  events:
    - http:
        method: post
        path: /manage/creator/{creatorID}/upload-signature
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):transloadit}

transloadit_notify:
  handler: src/api/assets/transloadit.transloadit_notify
  events:
    - http:
        method: post
        path: /assets/transloadit
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):transloadit}

################## Bundles #########################
bundle_create:
  handler: src/api/assets/bundles.bundle_create
  events:
    - http:
        method: post
        path: /bundles/create
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

bundle_update:
  handler: src/api/assets/bundles.bundle_update
  events:
    - http:
        method: put
        path: /bundles/{bundleID}
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

bundle_get:
  handler: src/api/assets/bundles.bundle_get
  events:
    - http:
        method: get
        path: /bundles/{bundleID}
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

bundle_delete:
  handler: src/api/assets/bundles.bundle_delete
  events:
    - http:
        method: post
        path: /bundles/{bundleID}/delete
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

bundle_query:
  handler: src/api/assets/bundles.bundle_query
  events:
    - http:
        method: get
        path: /bundles
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}

bundles_mine:
  handler: src/api/assets/bundles.bundles_mine
  events:
    - http:
        method: get
        path: /bundles/mine
        cors: ${self:custom.cors.${opt:stage, self:provider.stage}}
  environment:
    ${file(src/dynamic-environment.js):database}


